library(corrplot)
library(ggmap)
### Load the dataset
House <- read_csv("data/kc_house_data.csv")
head(House)
### Initialize a map for King County
kingCounty <- get_map(location = 'issaquah',
zoom = 9,
maptype = "roadmap"
)
### Generate a heat map
ggmap(kingCounty) +
geom_density2d(data = House, aes(x = long, y = lat), size = .3) +
stat_density2d(data = House, aes(x = long, y = lat, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.2, 0.4), guide = FALSE)
House %>%
mutate(
sale_year = year(date),
sale_month = month(date)
) %>%
select(-id, -date) -> House
set.seed(2017)
trainIdx <- sample(1:nrow(House), size = 0.7 * nrow(House))
train <- House[trainIdx, ]
test <- House[-trainIdx, ]
### Generate a heat map
ggmap(kingCounty) +
geom_point(data = train, aes(x = long, y = lat, color = log(price), alpha = log(price))) +
scale_color_gradient(low = "green", high = "red")
cor_House <- cor(House[, -1])
corrplot(cor_House, order = "hclust")
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = price, fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(price)) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = log(price), fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(log(price))) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(yr_cat = cut(yr_built, breaks = seq(1900, 2020, by = 10),
labels = paste0(seq(1900, 2010, by = 10), "s"))) %>%
ggplot(aes(x = yr_cat, y = log(price), fill = yr_cat)) +
geom_boxplot()
train %>%
filter(yr_renovated != 0) %>%
mutate(renovated_cat = cut(yr_renovated, breaks = seq(1930, 2020, by = 10),
labels = paste0(seq(1930, 2010, by = 10), "s"))) %>%
ggplot(aes(x = renovated_cat, y = log(price), fill = renovated_cat)) +
geom_boxplot()
train %>%
mutate(isRenovated = factor(ifelse(yr_renovated != 0, 1, 0))) %>%
ggplot(aes(x = isRenovated, y = log(price), fill = isRenovated)) +
geom_boxplot()
train %>%
mutate(sale_year = factor(sale_year)) %>%
ggplot(aes(x = sale_year, y = log(price), fill = sale_year)) +
geom_boxplot()
train %>%
mutate(sale_month = factor(sale_month)) %>%
ggplot(aes(x = sale_month, y = log(price), fill = sale_month)) +
geom_boxplot()
train %>%
mutate(bathrooms = factor(bathrooms)) %>%
ggplot(aes(x = bathrooms, y = log(price), fill = bathrooms)) +
geom_boxplot()
train %>%
ggplot(aes(x = lat, y = log(price), color = lat)) +
geom_line() + geom_point(shape = 21)
train %>%
ggplot(aes(x = long, y = log(price), color = long)) +
geom_line() + geom_point(shape = 21)
sort(unique(train$zipcode)) == sort(unique(test$zipcode))
train %>%
arrange(zipcode) %>%
mutate(zipcode = factor(zipcode)) %>%
ggplot(aes(x = zipcode, y = log(price), fill = zipcode)) +
geom_boxplot()
splitLat <- function(data){
data <- data %>%
dplyr::mutate(lat1 = ifelse(lat <= 47.5, lat, 0),
lat2 = ifelse(lat > 47.5 & lat <= 47.6, lat, 0),
lat3 = ifelse(lat > 47.6, lat, 0)) %>%
dplyr::select(-lat)
return(data)
}
train <- splitLat(train)
test <- splitLat(test)
train <- train %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
test <- test %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
train <- train %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
test <- test %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
train$zipcode <- factor(train$zipcode)
test$zipcode <- factor(test$zipcode)
zipcode_train <- data.frame(model.matrix(price ~ 0 + zipcode, data = train))
zipcode_test <- data.frame(model.matrix(price ~ 0 + zipcode, data = test))
train <- train %>%
select(-zipcode) %>%
cbind(zipcode_train)
test <- test %>%
select(-zipcode) %>%
cbind(zipcode_test)
train <- train %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
test <- test %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
model <- lm(price ~ ., data = train)
summary(model)
cor_train <- cor(as.matrix(train[, -1]))
corrplot(cor_train)
model <- lm(price ~ . -1, data = train)
summary(model)
model <- lm(price ~ ., data = train)
summary(model)
model <- lm(price ~ . -1, data = train)
summary(model)
model <- lm(price ~ . -1, data = train)
summary(model)
cor_train <- cor(as.matrix(train[, -1]))
corrplot(cor_train)
model <- lm(price ~ . -1 - sqft_basement, data = train)
summary(model)
model <- lm(price ~ . - sqft_basement, data = train)
summary(model)
model <- lm(price ~ . -1 - sqft_basement, data = train)
summary(model)
model <- lm(price ~ . -1, data = train)
summary(model)
model <- lm(price ~ . -1 - sqft_basement, data = train)
summary(model)
model <- lm(log(price) ~ ., data = train)
summary(model)
model <- lm(log(price) ~ . -1, data = train)
summary(model)
model <- lm(log(price) ~ . -1 - sqft_basement, data = train)
summary(model)
source('~/.active-rstudio-document', echo=TRUE)
library(Boruta)
getAnywhere(Boruta)
getAnywhere(namespace:Boruta)
UseMethod("Boruta")
getMethod(Boruta)
getMethod("Boruta")
getMethods("Boruta")
getMethods("Boruta.defalut")
getMethods("Boruta.default")
getMethod("Boruta.default")
getAnywhere("Boruta.default")
stop
?stop
rmsle <- function(predict, actual){
if(length(predict) != length(actual))
stop("The length of two vectors are different.")
len <- length(predict)
rmsle <- sqrt((1/len) * sum((log(predict + 1) - log(actual + 1))^2))
return(rmsle)
}
pred <- predict(model, test)
head(pred)
pred <- exp(pred)
head(pred)
head(test$price)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
model <- lm(log(price) ~ . - sqft_basement - zipcode98199, data = train)
model <- lm(log(price) ~ . - sqft_basement - zipcode98199, data = train)
summary(model)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
result
model <- lm(log(price) ~ ., data = train)
summary(model)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
head(test)
model
model <- lm(log(price) ~ . -1 - sqft_basement, data = train)
summary(model)
rmsle
rmsle(1, 1)
result
head(test$price)
pred
head(test$price)
head(price)
head(result)
model <- lm(log(price) ~ . -1 - bedrooms, data = train)
summary(model)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
model <- lm(log(price) ~ . -1 - sqft_basement, data = train)
summary(model)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE: ", result)
library(knitr)
library(rmdformats)
library(ggplot2)
library(dplyr)
library(ggthemr)
library(printr)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 14,
fig.retina = 2,
warning = FALSE,
comment = NA,
prompt = FALSE,
tidy = FALSE
)
custom_theme <- theme_bw(base_size = 11, base_family = "sans") +
theme(
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(face = "bold", size = 14),
panel.background = element_blank(),
axis.text.x = element_text(angle = 0,
vjust = .1),
axis.text.y = element_text(face = "italic"),
legend.position = "right",
strip.text = element_text(face = "bold",
size = 12),
legend.justification = "top",
legend.title = element_text(size = 9, face = 'bold')
)
theme_set(custom_theme)
set.seed(2017)
trainIdx <- sample(1:nrow(House), size = 0.7 * nrow(House))
train <- House[trainIdx, ]
test <- House[-trainIdx, ]
bench_model <- lm(price ~ ., data = train)
benchmark <- pred(bench_model, test)
bench_model <- lm(price ~ ., data = train)
benchmark <- predict(bench_model, test)
head(benchmark)
pred <- predict(model, test)
library(knitr)
library(rmdformats)
library(ggplot2)
library(dplyr)
library(ggthemr)
library(printr)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 14,
fig.retina = 2,
warning = FALSE,
comment = NA,
prompt = FALSE,
tidy = FALSE
)
custom_theme <- theme_bw(base_size = 11, base_family = "sans") +
theme(
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(face = "bold", size = 14),
panel.background = element_blank(),
axis.text.x = element_text(angle = 0,
vjust = .1),
axis.text.y = element_text(face = "italic"),
legend.position = "right",
strip.text = element_text(face = "bold",
size = 12),
legend.justification = "top",
legend.title = element_text(size = 9, face = 'bold')
)
theme_set(custom_theme)
### Load the libraries
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(ggmap)
### Load the dataset
House <- read_csv("data/kc_house_data.csv")
head(House)
### Initialize a map for King County
kingCounty <- get_map(location = 'issaquah',
zoom = 9,
maptype = "roadmap"
)
### Generate a heat map
ggmap(kingCounty) +
geom_density2d(data = House, aes(x = long, y = lat), size = .3) +
stat_density2d(data = House, aes(x = long, y = lat, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.2, 0.4), guide = FALSE)
House %>%
mutate(
sale_year = year(date),
sale_month = month(date)
) %>%
select(-id, -date) -> House
set.seed(2017)
trainIdx <- sample(1:nrow(House), size = 0.7 * nrow(House))
train <- House[trainIdx, ]
test <- House[-trainIdx, ]
bench_model <- lm(price ~ ., data = train)
benchmark <- predict(bench_model, test)
### Generate a heat map
ggmap(kingCounty) +
geom_point(data = train, aes(x = long, y = lat, color = log(price), alpha = log(price))) +
scale_color_gradient(low = "green", high = "red")
cor_House <- cor(House[, -1])
corrplot(cor_House, order = "hclust")
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = price, fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(price)) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = log(price), fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(log(price))) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(yr_cat = cut(yr_built, breaks = seq(1900, 2020, by = 10),
labels = paste0(seq(1900, 2010, by = 10), "s"))) %>%
ggplot(aes(x = yr_cat, y = log(price), fill = yr_cat)) +
geom_boxplot()
train %>%
filter(yr_renovated != 0) %>%
mutate(renovated_cat = cut(yr_renovated, breaks = seq(1930, 2020, by = 10),
labels = paste0(seq(1930, 2010, by = 10), "s"))) %>%
ggplot(aes(x = renovated_cat, y = log(price), fill = renovated_cat)) +
geom_boxplot()
train %>%
mutate(isRenovated = factor(ifelse(yr_renovated != 0, 1, 0))) %>%
ggplot(aes(x = isRenovated, y = log(price), fill = isRenovated)) +
geom_boxplot()
train %>%
mutate(sale_year = factor(sale_year)) %>%
ggplot(aes(x = sale_year, y = log(price), fill = sale_year)) +
geom_boxplot()
train %>%
mutate(sale_month = factor(sale_month)) %>%
ggplot(aes(x = sale_month, y = log(price), fill = sale_month)) +
geom_boxplot()
train %>%
mutate(bathrooms = factor(bathrooms)) %>%
ggplot(aes(x = bathrooms, y = log(price), fill = bathrooms)) +
geom_boxplot()
train %>%
ggplot(aes(x = lat, y = log(price), color = lat)) +
geom_line() + geom_point(shape = 21)
train %>%
ggplot(aes(x = long, y = log(price), color = long)) +
geom_line() + geom_point(shape = 21)
sort(unique(train$zipcode)) == sort(unique(test$zipcode))
train %>%
arrange(zipcode) %>%
mutate(zipcode = factor(zipcode)) %>%
ggplot(aes(x = zipcode, y = log(price), fill = zipcode)) +
geom_boxplot()
splitLat <- function(data){
data <- data %>%
dplyr::mutate(lat1 = ifelse(lat <= 47.5, lat, 0),
lat2 = ifelse(lat > 47.5 & lat <= 47.6, lat, 0),
lat3 = ifelse(lat > 47.6, lat, 0)) %>%
dplyr::select(-lat)
return(data)
}
train <- splitLat(train)
test <- splitLat(test)
train <- train %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
test <- test %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
train <- train %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
test <- test %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
train$zipcode <- factor(train$zipcode)
test$zipcode <- factor(test$zipcode)
zipcode_train <- data.frame(model.matrix(price ~ 0 + zipcode, data = train))
zipcode_test <- data.frame(model.matrix(price ~ 0 + zipcode, data = test))
train <- train %>%
select(-zipcode) %>%
cbind(zipcode_train)
test <- test %>%
select(-zipcode) %>%
cbind(zipcode_test)
train <- train %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
test <- test %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
model <- lm(log(price) ~ ., data = train)
summary(model)
model <- lm(log(price) ~ . -1, data = train)
summary(model)
model <- lm(log(price) ~ . -1 - sqft_basement, data = train)
summary(model)
rmsle <- function(predict, actual){
if(length(predict) != length(actual))
stop("The length of two vectors are different.")
len <- length(predict)
rmsle <- sqrt((1/len) * sum((log(predict + 1) - log(actual + 1))^2))
return(rmsle)
}
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
cat("RMSLE (Benchmark): ", benchmark, "\nRMSLE (Final): ", result)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
benchmark_result <- rmsle(benchmark, test$price)
cat("RMSLE (Benchmark): ", benchmark, "\nRMSLE (Final): ", result)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
benchmark_result <- rmsle(benchmark, test$price)
cat("RMSLE (Benchmark): ", benchmark_result, "\nRMSLE (Final): ", result)
head(benchmark)
head(test$price)
benchmark_result
log(benchmark_result)
log(benchmark)
benchmark[1000]
benchmark <- ifelse(benchmark < 0, 0, benchmark)
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
benchmark_result <- rmsle(benchmark, test$price)
cat("RMSLE (Benchmark): ", benchmark_result, "\nRMSLE (Final): ", result)
result / benchmark_result
benchmark_result / result
summary(bench_model)
bench_model <- lm(price ~ ., data = train)
summary(bench_model)
benchmark <- predict(bench_model, test)
benchmark <- ifelse(benchmark < 0, 0, benchmark)
markdown("2017-01-20-king-county.Rmd", "machine_learning")
getOption(scipen)
getOption("scipen")
options(scipen = NULL)
getOption("scipen")
markdown("2017-01-20-king-county.Rmd", "machine_learning")
getOption("scipen")
getOption("scipen", default = TRUE)
getOption("scipen", default = NULL)
getOption("scipen", default = 1)
getOption("scipen", default = NULL)
options(scipen = 0)
markdown("2017-01-20-king-county.Rmd", "machine_learning")
pred <- predict(model, test)
pred <- exp(pred)
result <- rmsle(pred, test$price)
benchmark_result <- rmsle(benchmark, test$price)
cat("RMSLE (Benchmark): ", benchmark_result, "\nRMSLE (Final): ", result)
