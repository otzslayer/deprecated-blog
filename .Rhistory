three
pi
letters
LETTERS
hi
hi <- "hi"
hi
introduce <- "My Name Is"
name <- "NAME"
introduce
name
introduce + name
paste(introduce, name)
paste(introduce, name)
paste0(introduce, name)
one
hi
class(one)
class(hi)
class(1)
class("1")
1 == 2
one == 1
two == 2
TRUE & TRUE
TRUE & FALSE
TRUE | FALSE
TRUE == 1
FALSE == 0
NA
1 + NA
is.numeric(1)
is.numeric(NA)
is.character(NA)
is.na(NA)
NaN
1 + NaN
0/0
Inf/Inf
is.nan(NaN)
is.nan(0/0)
NULL
1 + NULL
NA : NaN : NULL
99.9 : 0 : 0.1
NA : NaN : NULL
# 99.9 : 0 : 0.1
one
c(1, 2, 3, 4)
x <- c(1, 2, 3, 4, 5)
# Combine
x
12345
class(x)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x
1 : 10
1 : 10
1 : 100
seq(1, 100, by = 3)
seq(1, 100)
seq(1, 100, length.out = 101)
x
x <- c("1", "2", "3")
x
class(x)
as.numeric(x)
as.numeric("a")
x <- c(1, "2", 3)
x
x <- c(1, 0, TRUE)
x
c("1", 0, "TRUE")
c("1", 0, TRUE)
seq(1, 10, by = 2)
rep(1:4, 2)
rep(1:4, each = 2)
letters
letters[14]
letters[27]
letters[26]
letters[0]
letters[27]
letters[-1]
letters[-14]
letters[seq(1, 26, by = 2)]
letters[-seq(1, 26, by = 2)]
gender <- c(rep("male", 20), rep("female", 30))
gender <- factor(gender)
gender
gender <- c(rep("male", 20), rep("female", 30))
gender
levels(gender)
gender <- factor(gender)
levels(gender)
levels(gender) <- c("여", "남")
gender
table(gender)
levels(gender) <- c("A", "B")
gender
gender
as.numeric(gender)
levels(gender) <- c("0", "1")
gender
as.numeric(gender)
as.character(gender)
as.numeric(as.character(gender))
major <- read.csv("~/Desktop/major.csv")
major
str(major)
major$Major <- as.character(major$Major)
str(major)
str(major)
major <- read.csv("~/Desktop/major.csv")
str(major)
mat <- matrix(data = 1:9, ncol = 3)
mat
mat <- matrix(data = 1:9, nrow = 3)
mat
mat <- matrix(data = 1:9, nrow = 3, byrow = TRUE)
mat
mat[ 1, ]
mat[2, ]
mat[3, ]
mat[, 1]
mat[, 2]
mat[, 3]
mat
mat
mat[2, 2]
mat[2, 3]
mat
mat * 2
mat / 2
mat %*% mat
dim(mat)
grade <- list(name = c("A", "B", "C"),
score = c(90, 80, 70),
grade = c("A+", "B+", "B0"))
grade
grade
grade[1]
class(grade)
class(grade[1])
grade[1]
grade[[1]]
class(grade[[1]])
grade
data.frame(grade)
grade_df <- data.frame(grade)
class(grade_df)
is.data.frame(grade_df)
is.list(grade_df)
is.list(grade)
is.data.frame(grade)
grade_df <- data.frame(name = c("A", "B", "C"),
score = c(90, 80, 70),
grade = c("A+", "B+", "B0"))
grade_df
grade
str(grade_df)
grade
grade_df
x <- sample(1:100, 1)
x
if(x %% 2 == 1){
print("홀수")
} else{
print("짝수")
}
x <- 1:10
if(x %% 2 == 1){
print("홀수")
} else{
print("짝수")
}
ifelse(x %% 2 == 1, "홀수", "짝수")
ifelse(x %% 2 == 1, paste0(x, "는 홀수입니다.", paste0(x, "는 짝수입니다."))
ifelse(x %% 2 == 1, paste0(x, "는 홀수입니다."), paste0(x, "는 짝수입니다."))
sequence <- 2010:2017
sequence
for(i in sequence){
cat("올해는", i, "년입니다.\n")
}
set.seed(1234)
check <- sample(x = 1:100, size = 15)
check
count <- 0
for(i in 1:length(check)){
if(check[i] %% 2 == 1){
cat(check[i], "는 홀수입니다. COUNT!\n")
count <- count + 1
} else{
cat(check[i], "는 짝수입니다.\n")
}
}
count
check
check %% 2
sum(check %% 2)
for(i in 1:100){
if(i %% 7 == 0){
print(i)
}
}
i <- 1 ######
i <- 1
while(i <= 100){}
i <- 1
while(i <= 100){
if(i %% 7 == 0){
print(i)
}
i <- i + 1
}
markdown("2017-01-16-feature-selection.Rmd", "machine_learning")
markdown("2017-01-16-feature-selection.Rmd", "machine_learning")
markdown("2017-01-16-feature-selection.Rmd", "machine_learning")
x <- ( 2:9)
y <- ( 1:10)
for( i in x) for ( z in y) {
cat (i,"*",z,"=",i*z  )
if( z == 5) {cat( "\n")} else {cat("\t")}
if (z == 10) { cat( "\n", "============= \n")}
}
bday <- function(Vector){
for (i in Vector){
x <- 1
for (j in 1:i){
x <- x*((366-j)/365)
}
print(round(((1-x)*100),digits=2))
}
}
bday(1:20)
bday(10)
i <- 1
while(TRUE){
if (bday(1:i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
bday(20)
class(bday(1:1))
1:1
bday(1)
i <- 1
while(TRUE){
if (bday(i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
i <- 2
while(TRUE){
if (bday(i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
bday(i)>=50
bday(2)
bday(41)
bday(1) == 0
bday(2) == 0
bday(1:3)
bday(1:3) > 0
class(bday(1:3))
x <- bday(1:3)
class(x)
bday <- function(Vector){
for (i in Vector){
x <- 1
for (j in 1:i){
x <- x*((366-j)/365)
}
print(round(((1-x)*100),digits=2))
}
}
bday
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
print(round(result, 2))
}
bday(vec)
class(bday(vec = ))
class(bday(vec))
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
print(round(result, 2))
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
print(round(result, 2))
}
x <- bday(vec)
x
x >= 50
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2))
}
x <- bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2))
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2))
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2)
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2)
}
bday(vec)
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2)
print(result)
}
bday(vec)
class(bday(vec))
vec <- 1:30
bday <- function(vec){
length <- length(vec)
year <- 365
result <- NULL
for(i in 1:length){
prob <- 1
for(n in 1:vec[i]){
prob <- prob * ((year - (n-1))/year)
}
result <- c(result, prob)
}
result <- (1 - result) * 100
result <- round(result, 2)
return(result)
}
bday(vec)
class(bday(vec))
bday <- function(Vector){
for (i in Vector){
x <- 1
for (j in 1:i){
x <- x*((366-j)/365)
}
return(round(((1-x)*100),digits=2))
}
}
bday(1)
bday(1) == 0
i <- 1
while(TRUE){
if (bday(1:i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
i <- 1
while(TRUE){
if (bday(i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
bday(23)
bday <- function(Vector){
for (i in Vector){
x <- 1
for (j in 1:i){
x <- x*((366-j)/365)
}
return(round(((1-x)*100),digits=2))
}
}
i <- 1
while(TRUE){
if (bday(i)>=50){
cat(i, "명일 때 최초로 50% 이상의 확률을 보인다.")
break
}
i <- i+1
}
