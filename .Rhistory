inner_join(node_list %>% select(name, group.label), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, group.label), by = c("to" = "name")) %>%
mutate(group = as.factor(group.label.x))
edge_list <- data.frame(from = c(edge_list$from, edge_list$to),
to = c(edge_list$to, edge_list$from),
edge.color = rep(edge_list$edge.color, 2),
group.label.x = rep(edge_list$group.label.x, 2),
group.label.y = rep(edge_list$group.label.y, 2),
group = rep(edge_list$group, 2)
)
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
name_order <- (node_list %>% arrange(group.label))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
adjacency <- ggplot(plot_data, aes(x = from, y = to, fill = group)) +
geom_raster() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
xlab(NULL) + ylab(NULL) +
scale_fill_manual(values = colors,
labels = leagues,
name = "Leagues") +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1
# Hide the legend (optional)
)
adjacency
# EPL, La Liga, Bundesliga, Serie A
epl.list <- node_list %>%
filter(group == "England") %>%
.$name
laliga.list <- node_list %>%
filter(group == "Spain") %>%
.$name
bundes.list <- node_list %>%
filter(group == "Germany") %>%
.$name
seriea.list <- node_list %>%
filter(group == "Italy") %>%
.$name
epl.links <- team_links %>%
filter(from %in% epl.list | to %in% epl.list)
epl.nodes <- team_nodes %>%
filter(id %in% unique(c(as.character(epl.links$from), as.character(epl.links$to))))
epl.network <- graph_from_data_frame(d = epl.links, vertices = epl.nodes, directed = TRUE)
V(epl.network)$degree <- degree(epl.network)
V(epl.network)$closeness <- centralization.closeness(epl.network)$res
V(epl.network)$betweenness <- centralization.betweenness(epl.network)$res
V(epl.network)$eigen <- centralization.evcent(epl.network)$vector
E(epl.network)$width <- log(E(epl.network)$weight + 1)
E(epl.network)$width[E(epl.network)$width < 0.5] <- 0.5
V(epl.network)$size <- log(V(epl.network)$value + 1) * 1.5
edge.color <- 1:length(E(epl.network))
for(i in 1:nrow(epl.nodes)){
index <- incident(epl.network, V(epl.network)[i], mode = 'out')
group_index <- epl.nodes[i, "group.label"]
edge.color[index] <- colors[group_index]
}
vertex.color <- colors[V(epl.network)$group.label]
plot(epl.network, edge.arrow.size = .02,
vertex.frame.color = adjustcolor("#555555", alpha = .3),
edge.color = adjustcolor(edge.color, alpha.f = .7),
vertex.color = adjustcolor(vertex.color, alpha = .6),
vertex.label = V(epl.network)$label,
vertex.label.color = "black",
vertex.label.cex = .35,
vertex.label.family = "Helvetica",
layout=layout_nicely(epl.network)
)
legend(x = -.9, y = -1, label, pch = 21, cex = 0.5,
text.width = 0.2, col= adjustcolor(vertex.color, alpha.f = .4),
pt.bg = adjustcolor(colors, alpha = .6), pt.cex = 1, bty = "n", ncol = 5)
# Re-generate dataframes for both nodes and edges, now containing
# calculated network attributes
node_list <- get.data.frame(epl.network, what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(epl.network, what = "edges") %>%
inner_join(node_list %>% select(name, group.label), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, group.label), by = c("to" = "name")) %>%
mutate(group = as.factor(group.label.x))
edge_list <- data.frame(from = c(edge_list$from, edge_list$to),
to = c(edge_list$to, edge_list$from),
group.label.x = rep(edge_list$group.label.x, 2),
group.label.y = rep(edge_list$group.label.y, 2),
group = rep(edge_list$group, 2)
)
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
name_order <- (node_list %>% arrange(group.label))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
epl.adjacency <- ggplot(plot_data, aes(x = from, y = to, fill = group)) +
geom_raster() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
xlab(NULL) + ylab(NULL) +
scale_fill_manual(values = colors[c(-10, -12)],
labels = leagues[c(-10, -12)],
name = "Leagues") +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1
# Hide the legend (optional)
)
epl.adjacency
laliga.links <- team_links %>%
filter(from %in% laliga.list | to %in% laliga.list)
laliga.nodes <- team_nodes %>%
filter(id %in% unique(c(as.character(laliga.links$from), as.character(laliga.links$to))))
laliga.network <- graph_from_data_frame(d = laliga.links, vertices = laliga.nodes, directed = TRUE)
V(laliga.network)$degree <- degree(laliga.network)
V(laliga.network)$closeness <- centralization.closeness(laliga.network)$res
V(laliga.network)$betweenness <- centralization.betweenness(laliga.network)$res
V(laliga.network)$eigen <- centralization.evcent(laliga.network)$vector
E(laliga.network)$width <- log(E(laliga.network)$weight + 1)
E(laliga.network)$width[E(laliga.network)$width < 0.5] <- 0.5
V(laliga.network)$size <- log(V(laliga.network)$value + 1) * 1.5
edge.color <- 1:length(E(laliga.network))
for(i in 1:nrow(laliga.nodes)){
index <- incident(laliga.network, V(laliga.network)[i], mode = 'out')
group_index <- laliga.nodes[i, "group.label"]
edge.color[index] <- colors[group_index]
}
vertex.color <- colors[V(laliga.network)$group.label]
plot(laliga.network, edge.arrow.size = .02,
vertex.frame.color = adjustcolor("#555555", alpha = .3),
edge.color = adjustcolor(edge.color, alpha.f = .7),
vertex.color = adjustcolor(vertex.color, alpha = .6),
vertex.label = V(laliga.network)$label,
vertex.label.color = "black",
vertex.label.cex = .35,
vertex.label.family = "Helvetica",
layout=layout_nicely(laliga.network)
)
legend(x = -.9, y = -1, label, pch = 21, cex = 0.5,
text.width = 0.2, col= adjustcolor(vertex.color, alpha.f = .4),
pt.bg = adjustcolor(colors, alpha = .6), pt.cex = 1, bty = "n", ncol = 5)
# Re-generate dataframes for both nodes and edges, now containing
# calculated network attributes
node_list <- get.data.frame(laliga.network, what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(laliga.network, what = "edges") %>%
inner_join(node_list %>% select(name, group.label), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, group.label), by = c("to" = "name")) %>%
mutate(group = as.factor(group.label.x))
edge_list <- data.frame(from = c(edge_list$from, edge_list$to),
to = c(edge_list$to, edge_list$from),
group.label.x = rep(edge_list$group.label.x, 2),
group.label.y = rep(edge_list$group.label.y, 2),
group = rep(edge_list$group, 2)
)
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
name_order <- (node_list %>% arrange(group.label))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
laliga.adjacency <- ggplot(plot_data, aes(x = from, y = to, fill = group)) +
geom_raster() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
xlab(NULL) + ylab(NULL) +
scale_fill_manual(values = colors[c(-1, -10, -12)],
labels = leagues[c(-1, -10, -12)],
name = "Leagues") +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1
# Hide the legend (optional)
)
laliga.adjacency
bundes.links <- team_links %>%
filter(from %in% bundes.list | to %in% bundes.list)
bundes.nodes <- team_nodes %>%
filter(id %in% unique(c(as.character(bundes.links$from), as.character(bundes.links$to))))
bundes.network <- graph_from_data_frame(d = bundes.links, vertices = bundes.nodes, directed = TRUE)
V(bundes.network)$degree <- degree(bundes.network)
V(bundes.network)$closeness <- centralization.closeness(bundes.network)$res
V(bundes.network)$betweenness <- centralization.betweenness(bundes.network)$res
V(bundes.network)$eigen <- centralization.evcent(bundes.network)$vector
E(bundes.network)$width <- log(E(bundes.network)$weight + 1)
E(bundes.network)$width[E(bundes.network)$width < 0.5] <- 0.5
V(bundes.network)$size <- log(V(bundes.network)$value + 1) * 1.5
edge.color <- 1:length(E(bundes.network))
for(i in 1:nrow(bundes.nodes)){
index <- incident(bundes.network, V(bundes.network)[i], mode = 'out')
group_index <- bundes.nodes[i, "group.label"]
edge.color[index] <- colors[group_index]
}
vertex.color <- colors[V(bundes.network)$group.label]
plot(bundes.network, edge.arrow.size = .02,
vertex.frame.color = adjustcolor("#555555", alpha = .3),
edge.color = adjustcolor(edge.color, alpha.f = .7),
vertex.color = adjustcolor(vertex.color, alpha = .6),
vertex.label = V(bundes.network)$label,
vertex.label.color = "black",
vertex.label.cex = .35,
vertex.label.family = "Helvetica",
layout=layout_nicely(bundes.network)
)
legend(x = -.9, y = -1, label, pch = 21, cex = 0.5,
text.width = 0.2, col= adjustcolor(vertex.color, alpha.f = .4),
pt.bg = adjustcolor(colors, alpha = .6), pt.cex = 1, bty = "n", ncol = 5)
# Re-generate dataframes for both nodes and edges, now containing
# calculated network attributes
node_list <- get.data.frame(bundes.network, what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(bundes.network, what = "edges") %>%
inner_join(node_list %>% select(name, group.label), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, group.label), by = c("to" = "name")) %>%
mutate(group = as.factor(group.label.x))
edge_list <- data.frame(from = c(edge_list$from, edge_list$to),
to = c(edge_list$to, edge_list$from),
group.label.x = rep(edge_list$group.label.x, 2),
group.label.y = rep(edge_list$group.label.y, 2),
group = rep(edge_list$group, 2)
)
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
name_order <- (node_list %>% arrange(group.label))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
bundes.adjacency <- ggplot(plot_data, aes(x = from, y = to, fill = group)) +
geom_raster() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
xlab(NULL) + ylab(NULL) +
scale_fill_manual(values = colors[c(-1, -5, -8, -9, -10)],
labels = leagues[c(-1, -5, -8, -9, -10)],
name = "Leagues") +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1
# Hide the legend (optional)
)
bundes.adjacency
seriea.links <- team_links %>%
filter(from %in% seriea.list | to %in% seriea.list)
seriea.nodes <- team_nodes %>%
filter(id %in% unique(c(as.character(seriea.links$from), as.character(seriea.links$to))))
seriea.network <- graph_from_data_frame(d = seriea.links, vertices = seriea.nodes, directed = TRUE)
V(seriea.network)$degree <- degree(seriea.network)
V(seriea.network)$closeness <- centralization.closeness(seriea.network)$res
V(seriea.network)$betweenness <- centralization.betweenness(seriea.network)$res
V(seriea.network)$eigen <- centralization.evcent(seriea.network)$vector
E(seriea.network)$width <- log(E(seriea.network)$weight + 1)
E(seriea.network)$width[E(seriea.network)$width < 0.5] <- 0.5
V(seriea.network)$size <- log(V(seriea.network)$value + 1) * 1.5
edge.color <- 1:length(E(seriea.network))
for(i in 1:nrow(seriea.nodes)){
index <- incident(seriea.network, V(seriea.network)[i], mode = 'out')
group_index <- seriea.nodes[i, "group.label"]
edge.color[index] <- colors[group_index]
}
vertex.color <- colors[V(seriea.network)$group.label]
plot(seriea.network, edge.arrow.size = .02,
vertex.frame.color = adjustcolor("#555555", alpha = .3),
edge.color = adjustcolor(edge.color, alpha.f = .7),
vertex.color = adjustcolor(vertex.color, alpha = .6),
vertex.label = V(seriea.network)$label,
vertex.label.color = "black",
vertex.label.cex = .35,
vertex.label.family = "Helvetica",
layout=layout_nicely(seriea.network)
)
legend(x = -.9, y = -1, label, pch = 21, cex = 0.5,
text.width = 0.2, col= adjustcolor(vertex.color, alpha.f = .4),
pt.bg = adjustcolor(colors, alpha = .6), pt.cex = 1, bty = "n", ncol = 5)
# Re-generate dataframes for both nodes and edges, now containing
# calculated network attributes
node_list <- get.data.frame(seriea.network, what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(seriea.network, what = "edges") %>%
inner_join(node_list %>% select(name, group.label), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, group.label), by = c("to" = "name")) %>%
mutate(group = as.factor(group.label.x))
edge_list <- data.frame(from = c(edge_list$from, edge_list$to),
to = c(edge_list$to, edge_list$from),
group.label.x = rep(edge_list$group.label.x, 2),
group.label.y = rep(edge_list$group.label.y, 2),
group = rep(edge_list$group, 2)
)
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
name_order <- (node_list %>% arrange(group.label))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
seriea.adjacency <- ggplot(plot_data, aes(x = from, y = to, fill = group)) +
geom_raster() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
xlab(NULL) + ylab(NULL) +
scale_fill_manual(values = colors[c(-5, -10, -12)],
labels = leagues[c(-5, -10, -12)],
name = "Leagues") +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_blank(),
axis.text.y = element_blank(),
# Force the plot into a square aspect ratio
aspect.ratio = 1
# Hide the legend (optional)
)
seriea.adjacency
# Betweenness Centrality of Whole network
whole.between <- betweenness(network)
whole.between <- sort(whole.between, decreasing = TRUE)
head(whole.between, 10)
index <- as.numeric(gsub(x = names(head(whole.between, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
whole.eigen <- eigen_centrality(network, directed = TRUE)
whole.eigen <- sort(whole.eigen$vector, decreasing = TRUE)
head(whole.eigen, 10)
index <- as.numeric(gsub(x = names(head(whole.eigen, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
whole.degree <- degree(network, mode = "total")
whole.degree <- sort(whole.degree, decreasing = TRUE)
head(whole.degree, 10)
index <- as.numeric(gsub(x = names(head(whole.degree, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
whole.dd <- degree_distribution(network, cumulative = FALSE)
whole.dd <- data.frame(Degree = 0:(length(whole.dd) - 1),
Proportion = whole.dd)
whole.dd
ggplot(whole.dd[-1, ], aes(x = Degree, y = Proportion)) +
geom_point() +
geom_line() +
scale_x_log10() + scale_y_log10() + geom_smooth(method = "lm")
# Betweenness Centrality of Whole network
epl.between <- betweenness(epl.network)
epl.between <- sort(epl.between, decreasing = TRUE)
head(epl.between, 10)
index <- as.numeric(gsub(x = names(head(epl.between, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
epl.eigen <- eigen_centrality(epl.network, directed = TRUE, scale = FALSE)
epl.eigen <- sort(epl.eigen$vector, decreasing = TRUE)
head(epl.eigen, 10)
index <- as.numeric(gsub(x = names(head(epl.eigen, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
epl.degree <- degree(epl.network, mode = "total")
epl.degree <- sort(epl.degree, decreasing = TRUE)
head(epl.degree, 10)
index <- as.numeric(gsub(x = names(head(epl.degree, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
epl.dd <- degree_distribution(epl.network, cumulative = FALSE)
epl.dd <- data.frame(Degree = 0:(length(epl.dd) - 1),
Proportion = epl.dd)
epl.dd
ggplot(epl.dd[-1, ], aes(x = Degree, y = Proportion)) +
geom_point() +
geom_line() +
scale_x_log10() + scale_y_log10() + geom_smooth(method = "lm")
# Betweenness Centrality of Whole network
laliga.between <- betweenness(laliga.network)
laliga.between <- sort(laliga.between, decreasing = TRUE)
head(laliga.between, 10)
index <- as.numeric(gsub(x = names(head(laliga.between, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
laliga.eigen <- eigen_centrality(laliga.network, directed = TRUE, scale = FALSE)
laliga.eigen <- sort(laliga.eigen$vector, decreasing = TRUE)
head(laliga.eigen, 10)
index <- as.numeric(gsub(x = names(head(laliga.eigen, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
laliga.degree <- degree(laliga.network, mode = "total")
laliga.degree <- sort(laliga.degree, decreasing = TRUE)
head(laliga.degree, 10)
index <- as.numeric(gsub(x = names(head(laliga.degree, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
laliga.dd <- degree_distribution(laliga.network)
laliga.dd <- data.frame(Degree = 0:(length(laliga.dd) - 1),
Proportion = laliga.dd)
laliga.dd
ggplot(laliga.dd[-1, ], aes(x = Degree, y = Proportion)) +
geom_point() +
geom_line() +
scale_x_log10() + scale_y_log10() + geom_smooth(method = "lm")
# Betweenness Centrality of Whole network
bundes.between <- betweenness(bundes.network)
bundes.between <- sort(bundes.between, decreasing = TRUE)
head(bundes.between, 10)
index <- as.numeric(gsub(x = names(head(bundes.between, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
bundes.eigen <- eigen_centrality(bundes.network, directed = TRUE, scale = FALSE)
bundes.eigen <- sort(bundes.eigen$vector, decreasing = TRUE)
head(bundes.eigen, 10)
index <- as.numeric(gsub(x = names(head(bundes.eigen, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
bundes.degree <- degree(bundes.network, mode = "total")
bundes.degree <- sort(bundes.degree, decreasing = TRUE)
head(bundes.degree, 10)
index <- as.numeric(gsub(x = names(head(bundes.degree, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
bundes.dd <- degree_distribution(bundes.network)
bundes.dd <- data.frame(Degree = 0:(length(bundes.dd) - 1),
Proportion = bundes.dd)
bundes.dd
ggplot(bundes.dd[-1, ], aes(x = Degree, y = Proportion)) +
geom_point() +
geom_line() +
scale_x_log10() + scale_y_log10() + geom_smooth(method = "lm")
# Betweenness Centrality of Whole network
seriea.between <- betweenness(seriea.network)
seriea.between <- sort(seriea.between, decreasing = TRUE)
head(seriea.between, 10)
index <- as.numeric(gsub(x = names(head(seriea.between, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
seriea.eigen <- eigen_centrality(seriea.network, directed = TRUE, scale = FALSE)
seriea.eigen <- sort(seriea.eigen$vector, decreasing = TRUE)
head(seriea.eigen, 10)
index <- as.numeric(gsub(x = names(head(seriea.eigen, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
seriea.degree <- degree(seriea.network, mode = "total")
seriea.degree <- sort(seriea.degree, decreasing = TRUE)
head(seriea.degree, 10)
index <- as.numeric(gsub(x = names(head(seriea.degree, 10)), pattern = "team", replacement = ""))
team_nodes[index, ]
seriea.dd <- degree_distribution(seriea.network)
seriea.dd <- data.frame(Degree = 0:(length(seriea.dd) - 1),
Proportion = seriea.dd)
seriea.dd
ggplot(seriea.dd[-1, ], aes(x = Degree, y = Proportion)) +
geom_point() +
geom_line() +
scale_x_log10() + scale_y_log10() + geom_smooth(method = "lm")
?cluster.distribution
?clusters
c = edge.betweenness.community(network)
c
c = edge.betweenness.community(network)
?edge.betweenness.community
?cluster_fast_greedy
cluster_fast_greedy(network)
cluster_fast_greedy(network)
cluster_leading_eigen(network)
?cluster_leading_eigen
markdown("2016-12-20-adaptive-lasso.rmd", "machine_learning")
