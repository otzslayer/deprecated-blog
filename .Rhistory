zipcode98055 + zipcode98056 + zipcode98058 + zipcode98059 +
zipcode98065 + zipcode98070 + zipcode98072 + zipcode98074 +
zipcode98075 + zipcode98077 + zipcode98092 + zipcode98102 +
zipcode98103 + zipcode98105 + zipcode98106 + zipcode98107 +
zipcode98108 + zipcode98109 + zipcode98112 + zipcode98115 +
zipcode98116 + zipcode98117 + zipcode98118 + zipcode98119 +
zipcode98122 + zipcode98125 + zipcode98126 + zipcode98133 +
zipcode98136 + zipcode98144 + zipcode98146 + zipcode98148 +
zipcode98155 + zipcode98166 + zipcode98168 + zipcode98177 +
zipcode98178 + zipcode98188 + zipcode98198, data = train)))
vif > 10
pred <- predict(model, test)
pred <- exp(pred)
result.rmsle <- rmsle(pred, test$price)
benchmark.rmsle <- rmsle(benchmark, test$price)
cat("RMSLE (Benchmark): ", benchmark.rmsle, "\nRMSLE (Final): ", result.rmsle)
result.mse <- mse(pred, test$price)
benchmark.mse <- mse(benchmark, test$price)
cat("MSE (Benchmark):", benchmark.mse, "\nMSE (Final):", result.mse)
train <- train %>%
select(-long, -(lat1:lat3))
test <- test %>%
select(-long, -(lat1:lat3))
library(glmnet)
set.seed(2017)
lambda <- exp(-seq(7, 8, length.out = 400))
ridge.cv <- cv.glmnet(
x = as.matrix(train[, -1]),
y = log(train$price),
alpha = 0,
lambda = lambda,
parallel = TRUE
)
ridge.pred <- predict(ridge.cv, as.matrix(test[, -1]), s = ridge.cv$lambda.min)
ridge.pred <- as.vector(exp(ridge.pred))
ridge.rmsle <- rmsle(ridge.pred, test$price)
cat("RMSLE (Ridge):", ridge.rmsle)
ridge.mse <- mse(ridge.pred, test$price)
cat("MSE (Ridge):", ridge.mse)
set.seed(2017)
lambda <- exp(-seq(10, 11, length.out = 400))
lasso.cv <- cv.glmnet(
x = as.matrix(train[, -1]),
y = log(train$price),
alpha = 1,
lambda = lambda,
parallel = TRUE
)
lasso.pred <- predict(lasso.cv, as.matrix(test[, -1]), s = lasso.cv$lambda.min)
lasso.pred <- as.vector(exp(lasso.pred))
lasso.rmsle <- rmsle(lasso.pred, test$price)
cat("RMSLE (Lasso):", lasso.rmsle)
lasso.mse <- mse(lasso.pred, test$price)
cat("MSE (Lasso):", lasso.mse)
vif <- car::vif((lm(log(price) ~ bedrooms + bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above + sqft_living15 + sqft_lot15 + lat1 +
lat2 + lat3 + isRenovated + age + zipcode98001 + zipcode98002 +
zipcode98003 + zipcode98004 + zipcode98005 + zipcode98006 +
zipcode98007 + zipcode98008 + zipcode98010 + zipcode98011 +
zipcode98014 + zipcode98019 + zipcode98022 + zipcode98023 +
zipcode98024 + zipcode98027 + zipcode98028 + zipcode98029 +
zipcode98030 + zipcode98031 + zipcode98032 + zipcode98033 +
zipcode98034 + zipcode98038 + zipcode98039 + zipcode98040 +
zipcode98042 + zipcode98045 + zipcode98052 + zipcode98053 +
zipcode98055 + zipcode98056 + zipcode98058 + zipcode98059 +
zipcode98065 + zipcode98070 + zipcode98072 + zipcode98074 +
zipcode98075 + zipcode98077 + zipcode98092 + zipcode98102 +
zipcode98103 + zipcode98105 + zipcode98106 + zipcode98107 +
zipcode98108 + zipcode98109 + zipcode98112 + zipcode98115 +
zipcode98116 + zipcode98117 + zipcode98118 + zipcode98119 +
zipcode98122 + zipcode98125 + zipcode98126 + zipcode98133 +
zipcode98136 + zipcode98144 + zipcode98146 + zipcode98148 +
zipcode98155 + zipcode98166 + zipcode98168 + zipcode98177 +
zipcode98178 + zipcode98188 + zipcode98198, data = train)))
library(knitr)
library(rmdformats)
library(ggplot2)
library(dplyr)
library(ggthemr)
library(printr)
library(doParallel)
registerDoParallel(detectCores())
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 14,
fig.retina = 2,
warning = FALSE,
comment = NA,
prompt = FALSE,
tidy = FALSE,
cache = TRUE
)
custom_theme <- theme_bw(base_size = 11, base_family = "sans") +
theme(
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(face = "bold", size = 14),
panel.background = element_blank(),
axis.text.x = element_text(angle = 0,
vjust = 1),
axis.text.y = element_text(face = "italic"),
legend.position = "right",
strip.text = element_text(face = "bold",
size = 12),
legend.justification = "top",
legend.title = element_text(size = 9, face = 'bold')
)
theme_set(custom_theme)
### Load the libraries
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)
library(GGally)
library(corrplot)
library(ggmap)
### Load the dataset
House <- read_csv("data/kc_house_data.csv")
head(House)
### Initialize a map for King County
kingCounty <- get_map(location = 'issaquah',
zoom = 9,
maptype = "roadmap"
)
### Generate a heat map
ggmap(kingCounty) +
geom_density2d(data = House, aes(x = long, y = lat), size = .3) +
stat_density2d(data = House, aes(x = long, y = lat, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red") +
scale_alpha(range = c(0.2, 0.4), guide = FALSE)
House %>%
mutate(
sale_year = year(date),
sale_month = month(date)
) %>%
select(-id, -date) -> House
set.seed(2017)
trainIdx <- sample(1:nrow(House), size = 0.7 * nrow(House))
train <- House[trainIdx, ]
test <- House[-trainIdx, ]
bench_model <- lm(price ~ ., data = train)
summary(bench_model)
benchmark <- predict(bench_model, test)
benchmark <- ifelse(benchmark < 0, 0, benchmark)
### Generate a heat map
ggmap(kingCounty) +
geom_point(data = train, aes(x = long, y = lat, color = log(price), alpha = log(price))) +
scale_color_gradient(low = "green", high = "red")
cor_House <- cor(House[, -1])
corrplot(cor_House, order = "hclust")
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = price, fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(price)) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(grade = factor(grade)) %>%
ggplot(aes(x = grade, y = log(price), fill = grade)) +
geom_boxplot() +
geom_point(
data = train %>%
group_by(grade) %>%
summarise(median = median(log(price))) %>%
mutate(grade = factor(grade)),
aes(x = grade, y = median, group = 1),
size = 5, stroke = 2,
color = "black", fill = "white", shape = 23
)
train %>%
mutate(yr_cat = cut(yr_built, breaks = seq(1900, 2020, by = 10),
labels = paste0(seq(1900, 2010, by = 10), "s"))) %>%
ggplot(aes(x = yr_cat, y = log(price), fill = yr_cat)) +
geom_boxplot()
train %>%
filter(yr_renovated != 0) %>%
mutate(renovated_cat = cut(yr_renovated, breaks = seq(1930, 2020, by = 10),
labels = paste0(seq(1930, 2010, by = 10), "s"))) %>%
ggplot(aes(x = renovated_cat, y = log(price), fill = renovated_cat)) +
geom_boxplot()
train %>%
mutate(isRenovated = factor(ifelse(yr_renovated != 0, 1, 0))) %>%
ggplot(aes(x = isRenovated, y = log(price), fill = isRenovated)) +
geom_boxplot()
train %>%
mutate(sale_year = factor(sale_year)) %>%
ggplot(aes(x = sale_year, y = log(price), fill = sale_year)) +
geom_boxplot()
train %>%
mutate(sale_month = factor(sale_month)) %>%
ggplot(aes(x = sale_month, y = log(price), fill = sale_month)) +
geom_boxplot()
train %>%
mutate(bathrooms = factor(bathrooms)) %>%
ggplot(aes(x = bathrooms, y = log(price), fill = bathrooms)) +
geom_boxplot()
train %>%
ggplot(aes(x = lat, y = log(price), color = lat)) +
geom_line() + geom_point(shape = 21)
train %>%
ggplot(aes(x = long, y = log(price), color = long)) +
geom_line() + geom_point(shape = 21)
sort(unique(train$zipcode)) == sort(unique(test$zipcode))
train %>%
arrange(zipcode) %>%
mutate(zipcode = factor(zipcode)) %>%
ggplot(aes(x = zipcode, y = log(price), fill = zipcode)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, vjust = .1))
splitLat <- function(data){
data <- data %>%
dplyr::mutate(lat1 = ifelse(lat <= 47.5, lat, 0),
lat2 = ifelse(lat > 47.5 & lat <= 47.6, lat, 0),
lat3 = ifelse(lat > 47.6, lat, 0)) %>%
dplyr::select(-lat)
return(data)
}
train <- splitLat(train)
test <- splitLat(test)
train <- train %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
test <- test %>%
mutate(isRenovated = ifelse(yr_renovated != 0, 1, 0))
train <- train %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
test <- test %>%
mutate(age = ifelse(yr_renovated != 0, 2016 - yr_renovated, 2016 - yr_built))
train$zipcode <- factor(train$zipcode)
test$zipcode <- factor(test$zipcode)
zipcode_train <- data.frame(model.matrix(price ~ 0 + zipcode, data = train))
zipcode_test <- data.frame(model.matrix(price ~ 0 + zipcode, data = test))
train <- train %>%
select(-zipcode) %>%
cbind(zipcode_train)
test <- test %>%
select(-zipcode) %>%
cbind(zipcode_test)
train <- train %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
test <- test %>%
select(-sale_month, -yr_built, -yr_renovated, -sale_year)
vif <- car::vif((lm(log(price) ~ bedrooms + bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above + sqft_living15 + sqft_lot15 + lat1 +
lat2 + lat3 + isRenovated + age + zipcode98001 + zipcode98002 +
zipcode98003 + zipcode98004 + zipcode98005 + zipcode98006 +
zipcode98007 + zipcode98008 + zipcode98010 + zipcode98011 +
zipcode98014 + zipcode98019 + zipcode98022 + zipcode98023 +
zipcode98024 + zipcode98027 + zipcode98028 + zipcode98029 +
zipcode98030 + zipcode98031 + zipcode98032 + zipcode98033 +
zipcode98034 + zipcode98038 + zipcode98039 + zipcode98040 +
zipcode98042 + zipcode98045 + zipcode98052 + zipcode98053 +
zipcode98055 + zipcode98056 + zipcode98058 + zipcode98059 +
zipcode98065 + zipcode98070 + zipcode98072 + zipcode98074 +
zipcode98075 + zipcode98077 + zipcode98092 + zipcode98102 +
zipcode98103 + zipcode98105 + zipcode98106 + zipcode98107 +
zipcode98108 + zipcode98109 + zipcode98112 + zipcode98115 +
zipcode98116 + zipcode98117 + zipcode98118 + zipcode98119 +
zipcode98122 + zipcode98125 + zipcode98126 + zipcode98133 +
zipcode98136 + zipcode98144 + zipcode98146 + zipcode98148 +
zipcode98155 + zipcode98166 + zipcode98168 + zipcode98177 +
zipcode98178 + zipcode98188 + zipcode98198, data = train)))
vif > 5
vif > 5 == TRUE
vif > 5 = TRUE
vif[vif > 5]
names(vif[vif > 5])
names(vif[vif > 10])
vif <- car::vif((lm(log(price) ~ bedrooms + bathrooms + sqft_living + sqft_lot +
floors + waterfront + view + condition + grade + sqft_above +
long + sqft_living15 + sqft_lot15 + lat1 + lat2 + lat3 +
isRenovated + age + zipcode98001 + zipcode98002 +
zipcode98003 + zipcode98004 + zipcode98005 + zipcode98006 +
zipcode98007 + zipcode98008 + zipcode98010 + zipcode98011 +
zipcode98014 + zipcode98019 + zipcode98022 + zipcode98023 +
zipcode98024 + zipcode98027 + zipcode98028 + zipcode98029 +
zipcode98030 + zipcode98031 + zipcode98032 + zipcode98033 +
zipcode98034 + zipcode98038 + zipcode98039 + zipcode98040 +
zipcode98042 + zipcode98045 + zipcode98052 + zipcode98053 +
zipcode98055 + zipcode98056 + zipcode98058 + zipcode98059 +
zipcode98065 + zipcode98070 + zipcode98072 + zipcode98074 +
zipcode98075 + zipcode98077 + zipcode98092 + zipcode98102 +
zipcode98103 + zipcode98105 + zipcode98106 + zipcode98107 +
zipcode98108 + zipcode98109 + zipcode98112 + zipcode98115 +
zipcode98116 + zipcode98117 + zipcode98118 + zipcode98119 +
zipcode98122 + zipcode98125 + zipcode98126 + zipcode98133 +
zipcode98136 + zipcode98144 + zipcode98146 + zipcode98148 +
zipcode98155 + zipcode98166 + zipcode98168 + zipcode98177 +
zipcode98178 + zipcode98188 + zipcode98198, data = train)))
names(vif[vif > 10])
ㄱㄹ
rf
rf$forest
rf$forest$independent.variable.names
rf
rf$predictions
rf$r.squared
model
model <- lm(log(price) ~ ., data = train)
summary(model)
model
??R2
R2(pred, test$price)
caret::R2(pred, test$price)
library(caret)
R2(pred, test$price)
??R2
postResample(pred, test$price)
postResample(pred, test$price)[, 1]
class(postResample(pred, test$price))
class(postResample(pred, test$price)[1]
postResample(pred, test$price)[1]
result.rmse <- postResample(pred, test$price)[1]
ridge.rmse <- postResample(ridge.pred, test$price)[1]
lasso.rmse <- postResample(lasso.pred, test$price)[1]
adaLasso.rmse <- postResample(adaLasso.pred, test$price)[1]
rf.rmse <- postResample(rf.pred, test$price)[1]
xgb.rmse <- postResample(xgb.pred, test$price)[1]
result.rmse
ridge.rmse
result.r2 <- postResample(pred, test$price)[2]
ridge.r2 <- postResample(ridge.pred, test$price)[2]
lasso.r2 <- postResample(lasso.pred, test$price)[2]
adaLasso.r2 <- postResample(adaLasso.pred, test$price)[2]
rf.r2 <- postResample(rf.pred, test$price)[2]
xgb.r2 <- postResample(xgb.pred, test$price)[2]
result.r2
ridge.r2
lasso.r2
adaLasso.r2
rf.r2
xgb.r2
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_grid(Metric ~ ., scales = "free_y") +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_grid(Metric ~ ., scales = "free_y", nrow = 2, ncol = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
?facet_grid
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(Metric ~ ., scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive Lasso", "Random Forest", "XGBoost"),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive Lasso", "Random Forest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 3, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic')
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive\nLasso", "Random\nForest", "XGBoost"),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
RMSE = c(result.rmse, ridge.rmse, lasso.rmse, adaLasso.rmse, rf.rmse, xgb.rmse),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive\nLasso", "Random\nForest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 2.5, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic') +
theme(legend.key = element_rect(size = 5))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 2.5, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic') +
theme(legend.key = element_rect(size = 10))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 2.5, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic') +
theme(legend.key.size = unit(1.5, 'lines'))
?geom_text
library(caret)
result.r2 <- postResample(pred, test$price)[2]
ridge.r2 <- postResample(ridge.pred, test$price)[2]
lasso.r2 <- postResample(lasso.pred, test$price)[2]
adaLasso.r2 <- postResample(adaLasso.pred, test$price)[2]
rf.r2 <- postResample(rf.pred, test$price)[2]
xgb.r2 <- postResample(xgb.pred, test$price)[2]
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive\nLasso", "Random\nForest", "XGBoost"),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive\nLasso", "Random\nForest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_wrap(~ Metric, scales = "free_y", nrow = 2) +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 2.5, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic') +
theme(legend.key.size = unit(2, 'lines'))
final.result <- data.frame(Method = c("Least Square", "Ridge\nRegression", "Lasso", "Adaptive\nLasso", "Random\nForest", "XGBoost"),
MSE = c(result.mse, ridge.mse, lasso.mse, adaLasso.mse, rf.mse, xgb.mse),
RMSLE = c(result.rmsle, ridge.rmsle, lasso.rmsle, adaLasso.rmsle, rf.rmsle, xgb.rmsle),
R2 = c(result.r2, ridge.r2, lasso.r2, adaLasso.r2, rf.r2, xgb.r2))
final.result <- melt(final.result, id.vars = "Method",
variable.name = "Metric",
value.name = "Score")
final.result$Method <- factor(final.result$Method,
levels = c("Least Square", "Lasso", "Ridge\nRegression", "Adaptive\nLasso", "Random\nForest", "XGBoost"))
ggplot(final.result, aes(x = Method, y = Score, group = Metric)) +
geom_line(linetype = "dashed") + geom_point(aes(color = Method, shape = Method), size = 5) +
facet_grid(Metric ~ ., scales = "free_y") +
geom_text(aes(label = ifelse(Score < 1, round(Score, 7), round(Score, 1))),
size = 2.5, hjust = 1.2, vjust = 1.4, fontface = 'bold.italic') +
theme(legend.key.size = unit(2, 'lines'))
