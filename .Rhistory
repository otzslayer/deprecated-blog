"Hello World"
:)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(class)
?knn
sqrt(569)
sqrt(469)
library(MASS)
?Pima.tr
str(Pima.tr)
str(Pima.te)
pima <- rbind(Pima.tr, Pima.te)
str(pima)
head(pima)
pima.melt <-
library(reshape2)
pima.melt <- melt(pima, id.var = "type")
head(pima.melt)
str(pima.melt)
summary(pima.melt)
ggplot(data = pima.melt, aes(x = type, y = value)) +
geom_boxplot() + facet_wrap(~variable, ncol = 2)
pima.scale <- as.data.frame(scale(pima[, -8]))
str(pima.scale)
pima.scale$type = pima$type
pima.scale.melt <- melt(pima.scale, id.var = "type")
ggplot(data = pima.scale.melt, aes(x = type, y = value)) +
geom_boxplot() + facet_wrap(~variable, ncol = 2)
cor(pima.scale[, -8])
set.seed(502)
index <- sample(2, nrow(pima.scale), replace = TRUE, prob = c(0.7, 0.3))
str(index)
train <- pima.scale[index == 1, ]
test <- pima.sclae[index == 2, ]
test <- pima.scale[index == 2, ]
str(train)
str(test)
install.packages("caret")
library(caret)
grid1 <- expand.grid(.k = seq(2, 20, by = 1))
grid1
?trainControl
NA + NULL
NA + NULL
B - NA
20 - NA
is.null(NA + NULL)
is.na(NA + NULL)
is.na(1 + NA + NULL)
class(grid1)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
grid1 <- expand.grid(.k = seq(2, 20, by = 1))
control <- trainControl(method = "cv")
set.seed(502)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
library(e1071)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
install.packages("e1071")
library(e1071)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
library(caret)
grid1 <- expand.grid(.k = seq(2, 20, by = 1))
control <- trainControl(method = "cv")
set.seed(502)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
library(caret)
grid1 <- expand.grid(.k = seq(2, 20, by = 1))
control <- trainControl(method = "cv")
set.seed(502)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
set.seed(247)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
set.seed(502)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
set.seed(220)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
set.seed(247)
knn.train <- train(type~., data = train, method = "knn",
trControl = control, tuneGrid = grid1)
knn.train
knn.test <- knn(train[, -8], test[, -8], train[, 8], k = 15)
library(class)
knn.test <- knn(train[, -8], test[, -8], train[, 8], k = 15)
knn.test
?readLines
library(gmodels)
CrossTable(x = test[, 8], y = knn.test, prop.chisq = FALSE)
as.POSIXct()
as.POSIXct(date())
as.POSIXct(Sys.time())
as.POSIXlt(Sys.time())
class(as.POSIXlt(Sys.time())_
class(as.POSIXlt(Sys.time())0
class(as.POSIXlt(Sys.time()))
CrossTable(x = test[, 8], y = knn.test, prop.chisq = FALSE)
markdown("2016-01-22-kNN.Rmd", "machine_learning/")
markdown("2016-01-22-kNN.Rmd", "machine_learning/")
